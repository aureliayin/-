#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define swap(a,b) {typeof(a) t=a; a=b; b=t;}

void show_arr(int arr[],size_t len)
{
	for(int i=0; i<len; i++)
	{
		printf("%d ",arr[i]);
	}
	printf("\n");
}
void bubble_sort(int arr[],size_t len)
{
	for(int i=1; i<len; i++)
	{	bool flag = true;
		for(int j=0; j<len-i; j++)
		{
			printf("*");
			if(arr[j] > arr[j+1])
			{	flag = false;
				swap(arr[j],arr[j+1]);
			}
		}
		if(flag) return;
	}
}
void insert_sort(int arr[],int end,int count)
{
	for(int i=end+1,j; i<end+count; i++)
	{
		int val = arr[i];
		for(j=i; j>=0; j--)
		{
			if(arr[j-1] > val)
			{
				arr[j]=arr[j-1];
			}
			else
				break;
		}
		arr[j] = val;
	}
}
//选择排序
void select_sort(int arr[],size_t len)
{
	for(int i=0; i<len-1; i++)
	{
		int min = i;
		for(int j=i+1; j<len; j++)
		{
			if(arr[min] > arr[j])
				min=j;
		}
		if(min != i)
			swap(arr[min],arr[i]);
	}
}
//快速排序
void _quick_sort(int arr[],size_t left,size_t right)
{
	
	if(left >= right) return;
	//计算标杆的位置
	int p = (left+right)/2;
	//备份标杆的值
	int val = arr[p];
	//备份起点和终点的值
	size_t l=left,r=right-1;
	while(l<r)
	{
		//在左边找出比标杆大的值
		for(;l<p && arr[l]<=val; l++);
		//如果循环不是以l<p结束的说明找到大于标杆的值
		if(l<p)
		{
			//把它大于标杆的值移动到标杆位置
			arr[p] = arr[l];
			//这个数的位置成为新的标杆
			p=l;
		}
		//右边找到比标杆小的值
		for(; p<r && arr[r]>val; r--);
		//如果循环不是以p<r结束的说明找到小于标杆的值
		if(p<r)
		{
			//把小于标杆的值移动到标杆位置
			arr[p] = arr[r];
			//这个数的位置成为新的标杆位置
			p=r;
		}
	}
	//还原标杆的值
	arr[p] = val;
	//排序标杆左边数据
	_quick_sort(arr,left,p);
	//排序标杆右边数据
	_quick_sort(arr,p+1,right);

}
void quick_sort(int arr[], size_t len)
{
	_quick_sort(arr,0,len);
}
//归并
void merge(int arr[],int temp[],size_t left,size_t p,size_t right)
{
	int i=left,j=p+1,k=left;
	while(i<=p && j<=right)
	{
		if(arr[i] < arr[j])
			temp[k++] = arr[i++];
		else
			temp[k++] = arr[j++];
	}
	while(i<=p) temp[k++] = arr[i++];
	while(j<=right) temp[k++] = arr[j++];
	for(int i=left; i<right; i++)
	{
		arr[i] = temp[i];
	}
}
void _merge_sort(int arr[],int temp[],size_t left,size_t right)
{
	if(left<right)
	{
		int p = (left+right)/2;
		_merge_sort(arr,temp,left,p);
		_merge_sort(arr,temp,p+1,right);
		merge(arr,temp,left,p,right);
	}
}
void merge_sort(int arr[],size_t len)
{
	int temp[len];
	_merge_sort(arr,temp,0,len-1);
}
int main()
{
	int arr[10]={};
	for(int i=0; i<10; i++)
	{
		arr[i]=rand()%100;
	}
	show_arr(arr,10);
//	quick_sort(arr,0,10);
//	bubble_sort(arr,10);
	merge_sort(arr,10);
	show_arr(arr,10);
}
